{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2023-05-26T16:53:02.194Z",
    "end": "2023-05-26T16:53:12.193Z",
    "duration": 9999,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "647faaea-0316-429e-bffa-c0af25fdc3ef",
      "title": "",
      "fullFile": "cypress\\e2e\\features\\cruisebound_checkout.feature",
      "file": "cypress\\e2e\\features\\cruisebound_checkout.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "000493c4-0f48-41ee-a083-8a66988e3f4a",
          "title": "Cruisebound hold for free",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Hold for free cabin happy path",
              "fullTitle": "Cruisebound hold for free Hold for free cabin happy path",
              "timedOut": null,
              "duration": 9899,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress\\\\e2e\\\\features\\\\cruisebound_checkout.feature\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"\\\\cruisebound_checkout.feature\\\\Cruisebound hold for free -- Hold for free cabin happy path (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "var _a2, _b, _c, _d, _e;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      try {\n        return (0, cypress_1.runStepWithLogGroup)({\n          keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n          argument,\n          text,\n          fn: () => {\n            for (const beforeStepHook of beforeStepHooks) {\n              registry2.runStepHook(this, beforeStepHook, options);\n            }\n            const result = registry2.runStepDefininition(this, text, argument);\n            for (const afterStepHook of afterStepHooks.reverse()) {\n              registry2.runStepHook(this, afterStepHook, options);\n            }\n            return result;\n          }\n        }).then((result) => {\n          return {\n            start,\n            result\n          };\n        });\n      } catch (e) {\n        if (e instanceof registry_1.MissingDefinitionError) {\n          throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n        } else {\n          throw e;\n        }\n      }\n    }).then(({ start, result }) => {\n      var _a3, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `[data-cy=\"btnSelectCabin\"]`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `[data-cy=\"btnSelectCabin\"]`, but never found it.\n    at Object.selectCabin (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:15537:33)\n    at HomePage.clickOnSelectCabinButton (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:15545:25)\n    at Context.eval (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:15861:33)\n    at Registry.runStepDefininition (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:8543:48)\n    at Object.fn (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:14938:48)\n    at runStepWithLogGroup (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:14603:29)\n    at Context.eval (https://frontend.cruisebound-qa.com/__cypress/tests?p=cypress\\e2e\\features\\cruisebound_checkout.feature:14930:60)",
                "diff": null
              },
              "uuid": "99cd142e-d205-4cea-a2b3-7392582afc7b",
              "parentUUID": "000493c4-0f48-41ee-a083-8a66988e3f4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "99cd142e-d205-4cea-a2b3-7392582afc7b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9899,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}